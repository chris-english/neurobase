
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "freesurfer"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "freesurfer-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('freesurfer')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("aparcs_to_bg")
> ### * aparcs_to_bg
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aparcs_to_bg
> ### Title: Convert Freesurfer aparcs Table to brainGraph
> ### Aliases: aparcs_to_bg
> 
> ### ** Examples
> 
> if (have_fs()) {
+    fs_subj_dir() 
+    df = aparcs_to_bg(subjects = "bert", measure = "thickness")
+    print(head(df))
+ }
Warning in fs_subj_dir() :
  SUBJECTS_DIR not set, setting to file.path(set_fs_subj_dir(), 'subjects')
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/aparcstats2table --hemi lh --subjects bert --delimiter tab --parc aparc --debug --measure thickness --tablefile /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a694cd4adc.txt 

-- The options you entered --
{'meas': 'thickness', 'hemi': 'lh', 'parc': 'aparc', 'qdeclong': None, 'transposeflag': False, 'qdec': None, 'commonparcflag': False, 'skipflag': False, 'parcidflag': False, 'verboseflag': True, 'subjectsfile': None, 'delimiter': 'tab', 'outputfile': '/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a694cd4adc.txt', 'parcs': None, 'reportroiflag': False, 'parcsfile': None, 'subjects': ['bert']}
--------------------
Processing file /Applications/freesurfer/subjects/bert/stats/lh.aparc.stats
-- Parsed Parcs and Measures --
StableDict({'bankssts': 2.693, 'caudalanteriorcingulate': 2.311, 'caudalmiddlefrontal': 2.645, 'cuneus': 1.792, 'entorhinal': 3.099, 'fusiform': 2.569, 'inferiorparietal': 2.538, 'inferiortemporal': 2.897, 'isthmuscingulate': 2.192, 'lateraloccipital': 2.243, 'lateralorbitofrontal': 2.833, 'lingual': 1.744, 'medialorbitofrontal': 2.597, 'middletemporal': 3.109, 'parahippocampal': 2.399, 'paracentral': 2.531, 'parsopercularis': 2.948, 'parsorbitalis': 3.183, 'parstriangularis': 2.651, 'pericalcarine': 1.542, 'postcentral': 2.192, 'posteriorcingulate': 2.496, 'precentral': 2.915, 'precuneus': 2.349, 'rostralanteriorcingulate': 3.072, 'rostralmiddlefrontal': 2.473, 'superiorfrontal': 2.929, 'superiorparietal': 2.309, 'superiortemporal': 2.911, 'supramarginal': 2.742, 'frontalpole': 2.981, 'temporalpole': 3.891, 'transversetemporal': 2.484, 'insula': 3.09, 'MeanThickness': 2.58477})
--------------------
Specifier: bert
Intersection upto now:
['bankssts', 'caudalanteriorcingulate', 'caudalmiddlefrontal', 'cuneus', 'entorhinal', 'fusiform', 'inferiorparietal', 'inferiortemporal', 'isthmuscingulate', 'lateraloccipital', 'lateralorbitofrontal', 'lingual', 'medialorbitofrontal', 'middletemporal', 'parahippocampal', 'paracentral', 'parsopercularis', 'parsorbitalis', 'parstriangularis', 'pericalcarine', 'postcentral', 'posteriorcingulate', 'precentral', 'precuneus', 'rostralanteriorcingulate', 'rostralmiddlefrontal', 'superiorfrontal', 'superiorparietal', 'superiortemporal', 'supramarginal', 'frontalpole', 'temporalpole', 'transversetemporal', 'insula', 'MeanThickness']
--------------------
Union:
['bankssts', 'caudalanteriorcingulate', 'caudalmiddlefrontal', 'cuneus', 'entorhinal', 'fusiform', 'inferiorparietal', 'inferiortemporal', 'isthmuscingulate', 'lateraloccipital', 'lateralorbitofrontal', 'lingual', 'medialorbitofrontal', 'middletemporal', 'parahippocampal', 'paracentral', 'parsopercularis', 'parsorbitalis', 'parstriangularis', 'pericalcarine', 'postcentral', 'posteriorcingulate', 'precentral', 'precuneus', 'rostralanteriorcingulate', 'rostralmiddlefrontal', 'superiorfrontal', 'superiorparietal', 'superiortemporal', 'supramarginal', 'frontalpole', 'temporalpole', 'transversetemporal', 'insula', 'MeanThickness']
SUBJECTS_DIR : /Applications/freesurfer/subjects
Parsing the .stats files
Building the table..
Writing the table to /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a694cd4adc.txt
    id  name thickness
1 bert lBSTS     2.693
2 bert lcACC     2.311
3 bert lcMFG     2.645
4 bert  lCUN     1.792
5 bert  lENT     3.099
6 bert  lFUS     2.569
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aparcs_to_bg", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aparcstats2table")
> ### * aparcstats2table
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aparcstats2table
> ### Title: Parcellation Stats to Table
> ### Aliases: aparcstats2table
> 
> ### ** Examples
> 
> if (have_fs()) {
+    fs_subj_dir()
+    outfile = aparcstats2table(subjects = "bert",
+                     hemi = "lh",
+                     meas = "thickness")
+ }
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/aparcstats2table --hemi lh --subjects bert --delimiter tab --parc aparc --debug --measure thickness --tablefile /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a6941edb3fa.txt 

-- The options you entered --
{'meas': 'thickness', 'hemi': 'lh', 'parc': 'aparc', 'qdeclong': None, 'transposeflag': False, 'qdec': None, 'commonparcflag': False, 'skipflag': False, 'parcidflag': False, 'verboseflag': True, 'subjectsfile': None, 'delimiter': 'tab', 'outputfile': '/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a6941edb3fa.txt', 'parcs': None, 'reportroiflag': False, 'parcsfile': None, 'subjects': ['bert']}
--------------------
Processing file /Applications/freesurfer/subjects/bert/stats/lh.aparc.stats
-- Parsed Parcs and Measures --
StableDict({'bankssts': 2.693, 'caudalanteriorcingulate': 2.311, 'caudalmiddlefrontal': 2.645, 'cuneus': 1.792, 'entorhinal': 3.099, 'fusiform': 2.569, 'inferiorparietal': 2.538, 'inferiortemporal': 2.897, 'isthmuscingulate': 2.192, 'lateraloccipital': 2.243, 'lateralorbitofrontal': 2.833, 'lingual': 1.744, 'medialorbitofrontal': 2.597, 'middletemporal': 3.109, 'parahippocampal': 2.399, 'paracentral': 2.531, 'parsopercularis': 2.948, 'parsorbitalis': 3.183, 'parstriangularis': 2.651, 'pericalcarine': 1.542, 'postcentral': 2.192, 'posteriorcingulate': 2.496, 'precentral': 2.915, 'precuneus': 2.349, 'rostralanteriorcingulate': 3.072, 'rostralmiddlefrontal': 2.473, 'superiorfrontal': 2.929, 'superiorparietal': 2.309, 'superiortemporal': 2.911, 'supramarginal': 2.742, 'frontalpole': 2.981, 'temporalpole': 3.891, 'transversetemporal': 2.484, 'insula': 3.09, 'MeanThickness': 2.58477})
--------------------
Specifier: bert
Intersection upto now:
['bankssts', 'caudalanteriorcingulate', 'caudalmiddlefrontal', 'cuneus', 'entorhinal', 'fusiform', 'inferiorparietal', 'inferiortemporal', 'isthmuscingulate', 'lateraloccipital', 'lateralorbitofrontal', 'lingual', 'medialorbitofrontal', 'middletemporal', 'parahippocampal', 'paracentral', 'parsopercularis', 'parsorbitalis', 'parstriangularis', 'pericalcarine', 'postcentral', 'posteriorcingulate', 'precentral', 'precuneus', 'rostralanteriorcingulate', 'rostralmiddlefrontal', 'superiorfrontal', 'superiorparietal', 'superiortemporal', 'supramarginal', 'frontalpole', 'temporalpole', 'transversetemporal', 'insula', 'MeanThickness']
--------------------
Union:
['bankssts', 'caudalanteriorcingulate', 'caudalmiddlefrontal', 'cuneus', 'entorhinal', 'fusiform', 'inferiorparietal', 'inferiortemporal', 'isthmuscingulate', 'lateraloccipital', 'lateralorbitofrontal', 'lingual', 'medialorbitofrontal', 'middletemporal', 'parahippocampal', 'paracentral', 'parsopercularis', 'parsorbitalis', 'parstriangularis', 'pericalcarine', 'postcentral', 'posteriorcingulate', 'precentral', 'precuneus', 'rostralanteriorcingulate', 'rostralmiddlefrontal', 'superiorfrontal', 'superiorparietal', 'superiortemporal', 'supramarginal', 'frontalpole', 'temporalpole', 'transversetemporal', 'insula', 'MeanThickness']
SUBJECTS_DIR : /Applications/freesurfer/subjects
Parsing the .stats files
Building the table..
Writing the table to /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a6941edb3fa.txt
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aparcstats2table", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("asegstats2table")
> ### * asegstats2table
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: asegstats2table
> ### Title: Parcellation Stats to Table
> ### Aliases: asegstats2table
> 
> ### ** Examples
> 
> if (have_fs()) {
+    outfile = asegstats2table(subjects = "bert",
+                     meas = "mean")
+ }
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/asegstats2table --subjects bert --delimiter tab --debug --meas mean --tablefile /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a695cc303e6.txt 

-- The options you entered --
{'maxsegno': None, 'inputs': None, 'all_flag': False, 'verboseflag': True, 'skipflag': False, 'qdeclong': None, 'transposeflag': False, 'qdec': None, 'delimiter': 'tab', 'segnos': None, 'meas': 'mean', 'statsfname': None, 'dodirect': False, 'subjectsfile': None, 'outputfile': '/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a695cc303e6.txt', 'segidsfile': None, 'no_segnos': None, 'subdir': None, 'subjects': ['bert'], 'common_flag': False}
--------------------
Processing file /Applications/freesurfer/subjects/bert/stats/aseg.stats
-- Parsed Ids, Names --
StableDict({'4': 'Left-Lateral-Ventricle', '5': 'Left-Inf-Lat-Vent', '7': 'Left-Cerebellum-White-Matter', '8': 'Left-Cerebellum-Cortex', '10': 'Left-Thalamus-Proper', '11': 'Left-Caudate', '12': 'Left-Putamen', '13': 'Left-Pallidum', '14': '3rd-Ventricle', '15': '4th-Ventricle', '16': 'Brain-Stem', '17': 'Left-Hippocampus', '18': 'Left-Amygdala', '24': 'CSF', '26': 'Left-Accumbens-area', '28': 'Left-VentralDC', '30': 'Left-vessel', '31': 'Left-choroid-plexus', '43': 'Right-Lateral-Ventricle', '44': 'Right-Inf-Lat-Vent', '46': 'Right-Cerebellum-White-Matter', '47': 'Right-Cerebellum-Cortex', '49': 'Right-Thalamus-Proper', '50': 'Right-Caudate', '51': 'Right-Putamen', '52': 'Right-Pallidum', '53': 'Right-Hippocampus', '54': 'Right-Amygdala', '58': 'Right-Accumbens-area', '60': 'Right-VentralDC', '62': 'Right-vessel', '63': 'Right-choroid-plexus', '72': '5th-Ventricle', '77': 'WM-hypointensities', '78': 'Left-WM-hypointensities', '79': 'Right-WM-hypointensities', '80': 'non-WM-hypointensities', '81': 'Left-non-WM-hypointensities', '82': 'Right-non-WM-hypointensities', '85': 'Optic-Chiasm', '251': 'CC_Posterior', '252': 'CC_Mid_Posterior', '253': 'CC_Central', '254': 'CC_Mid_Anterior', '255': 'CC_Anterior'})
-- Measures --
[36.0959, 54.8842, 92.7562, 77.2709, 92.8386, 80.9591, 88.381, 98.3287, 45.0488, 38.1701, 86.3845, 77.5933, 77.9203, 53.0562, 76.0928, 93.2606, 67.4074, 52.9403, 38.666, 46.2619, 93.1505, 77.0261, 91.032, 81.7689, 87.4327, 97.2662, 77.371, 78.3497, 79.6013, 92.0489, 67.1892, 58.6039, 51.3846, 73.9494, 0.0, 0.0, 60.4, 0.0, 0.0, 78.062, 106.6502, 100.4876, 100.6612, 102.1485, 104.7069]
----------------------------------------
Sanitizing the table
--------------------
Specifier: bert
Intersection upto now:
['Left-Lateral-Ventricle', 'Left-Inf-Lat-Vent', 'Left-Cerebellum-White-Matter', 'Left-Cerebellum-Cortex', 'Left-Thalamus-Proper', 'Left-Caudate', 'Left-Putamen', 'Left-Pallidum', '3rd-Ventricle', '4th-Ventricle', 'Brain-Stem', 'Left-Hippocampus', 'Left-Amygdala', 'CSF', 'Left-Accumbens-area', 'Left-VentralDC', 'Left-vessel', 'Left-choroid-plexus', 'Right-Lateral-Ventricle', 'Right-Inf-Lat-Vent', 'Right-Cerebellum-White-Matter', 'Right-Cerebellum-Cortex', 'Right-Thalamus-Proper', 'Right-Caudate', 'Right-Putamen', 'Right-Pallidum', 'Right-Hippocampus', 'Right-Amygdala', 'Right-Accumbens-area', 'Right-VentralDC', 'Right-vessel', 'Right-choroid-plexus', '5th-Ventricle', 'WM-hypointensities', 'Left-WM-hypointensities', 'Right-WM-hypointensities', 'non-WM-hypointensities', 'Left-non-WM-hypointensities', 'Right-non-WM-hypointensities', 'Optic-Chiasm', 'CC_Posterior', 'CC_Mid_Posterior', 'CC_Central', 'CC_Mid_Anterior', 'CC_Anterior']
--------------------
Union:
['Left-Lateral-Ventricle', 'Left-Inf-Lat-Vent', 'Left-Cerebellum-White-Matter', 'Left-Cerebellum-Cortex', 'Left-Thalamus-Proper', 'Left-Caudate', 'Left-Putamen', 'Left-Pallidum', '3rd-Ventricle', '4th-Ventricle', 'Brain-Stem', 'Left-Hippocampus', 'Left-Amygdala', 'CSF', 'Left-Accumbens-area', 'Left-VentralDC', 'Left-vessel', 'Left-choroid-plexus', 'Right-Lateral-Ventricle', 'Right-Inf-Lat-Vent', 'Right-Cerebellum-White-Matter', 'Right-Cerebellum-Cortex', 'Right-Thalamus-Proper', 'Right-Caudate', 'Right-Putamen', 'Right-Pallidum', 'Right-Hippocampus', 'Right-Amygdala', 'Right-Accumbens-area', 'Right-VentralDC', 'Right-vessel', 'Right-choroid-plexus', '5th-Ventricle', 'WM-hypointensities', 'Left-WM-hypointensities', 'Right-WM-hypointensities', 'non-WM-hypointensities', 'Left-non-WM-hypointensities', 'Right-non-WM-hypointensities', 'Optic-Chiasm', 'CC_Posterior', 'CC_Mid_Posterior', 'CC_Central', 'CC_Mid_Anterior', 'CC_Anterior']
SUBJECTS_DIR : /Applications/freesurfer/subjects
Parsing the .stats files
Building the table..
Writing the table to /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a695cc303e6.txt
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("asegstats2table", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("construct_subj_dir")
> ### * construct_subj_dir
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: construct_subj_dir
> ### Title: Construct Subject Directory
> ### Aliases: construct_subj_dir
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(freesurfer)
> ##D label = "/Applications/freesurfer/subjects/bert/label/aparc.annot.a2009s.ctab"
> ##D mri = c(
> ##D   "/Applications/freesurfer/subjects/bert/mri/aparc.a2009s+aseg.mgz",
> ##D   "/Applications/freesurfer/subjects/bert/mri/aseg.auto.mgz")
> ##D stats = c("/Applications/freesurfer/subjects/bert/stats/lh.aparc.stats",
> ##D           "/Applications/freesurfer/subjects/bert/stats/aseg.stats")
> ##D surf = "/Applications/freesurfer/subjects/bert/surf/lh.thickness"
> ##D touch = NULL
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("construct_subj_dir", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("convert_surface")
> ### * convert_surface
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: convert_surface
> ### Title: Convert Freesurfer Surface
> ### Aliases: convert_surface
> 
> ### ** Examples
> 
> if (have_fs()) {
+ infile = file.path(fs_subj_dir(), 
+                    "bert", "surf", "rh.pial")
+ res = convert_surface(infile = infile)
+ }
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/mris_convert   /Applications/freesurfer/subjects/bert/surf/rh.pial /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a69735209e.asc

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("convert_surface", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("freesurfer_read3")
> ### * freesurfer_read3
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: freesurfer_read3
> ### Title: Freesurfer Read 3 records
> ### Aliases: freesurfer_read3
> 
> ### ** Examples
> 
> if (have_fs()) {
+    bert_dir = file.path(fs_subj_dir(), "bert", "surf")
+    file = file.path(bert_dir, "lh.thickness")
+    out = freesurfer_read3(file)
+ }
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("freesurfer_read3", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("freesurfer_read3_con")
> ### * freesurfer_read3_con
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: freesurfer_read3_con
> ### Title: Freesurfer Read 3 records
> ### Aliases: freesurfer_read3_con
> 
> ### ** Examples
> 
> if (have_fs()) {
+    bert_dir = file.path(fs_subj_dir(), "bert", "surf")
+    file = file.path(bert_dir, "lh.thickness")
+    fid = file(file, open = "rb")
+    out = freesurfer_read3_con(file)
+ } 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("freesurfer_read3_con", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("freesurfer_read_curv")
> ### * freesurfer_read_curv
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: freesurfer_read_curv
> ### Title: Read Freesufer Curv file
> ### Aliases: freesurfer_read_curv
> 
> ### ** Examples
> 
> if (have_fs()) {
+    bert_dir = file.path(fs_subj_dir(), "bert", "surf")
+    file = file.path(bert_dir, "lh.thickness")
+    fid = file(file, open = "rb")
+    out = freesurfer_read_curv(file)
+ } 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("freesurfer_read_curv", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("freesurfer_read_surf")
> ### * freesurfer_read_surf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: freesurfer_read_surf
> ### Title: Read Freesurfer Surface file
> ### Aliases: freesurfer_read_surf
> 
> ### ** Examples
> 
> if (have_fs()) {
+    fname = file.path(fs_subj_dir(), "bert", "surf", "lh.inflated")
+    out = freesurfer_read_surf(fname)
+ }
[1] "created by nicks on Tue May  7 17:26:32 2013"
[1] ""
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("freesurfer_read_surf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("freesurferdir")
> ### * freesurferdir
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: freesurferdir
> ### Title: Get Freesurfer's Directory
> ### Aliases: freesurferdir freesurfer_dir fs_dir
> 
> ### ** Examples
> 
> if (have_fs()) {
+  freesurferdir()
+  freesurfer_dir()
+  fs_dir()
+ }
Warning: closing unused connection 4 (/Applications/freesurfer/subjects/bert/surf/lh.thickness)
Warning: closing unused connection 3 (/Applications/freesurfer/subjects/bert/surf/lh.thickness)
[1] "/Applications/freesurfer"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("freesurferdir", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fs_help")
> ### * fs_help
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fs_help
> ### Title: Wrapper for getting Freesurfer help
> ### Aliases: fs_help
> 
> ### ** Examples
> 
> if (have_fs()) {
+ fs_help(func_name = "mri_watershed")
+ }

				Help

NAME
	mri_watershed

SYNOPSIS
	mri_watershed [<options>] invol outvol

DESCRIPTION
	This program strips skull and other outer non-brain tissue and 
	produces the brain volume from T1 volume or the scanned volume.
	
	The "watershed" segmentation algorithm was used to dertermine the 
	intensity values for white matter, grey matter, and CSF. 
	A force field was then used to fit a spherical surface to the brain. 
	The shape of the surface fit was then evaluated against a previously 
	derived template. 
	
	If you used -atlas option, then { The template was used to correct the
	surface. }
	
	The finely grained sphere was fit to the brain.
	
	The default parameters are: -w 0.82 -b 0.32 -h 10 -seedpt -ta -wta 
	
	You can use one of the first five flags to change these default 
	parms.
	
	(Segonne 2004)

POSITIONAL ARGUMENTS
	invol
		input volume

	outvol
		output volume

REQUIRED FLAGGED ARGUMENTS
	None

OPTIONAL FLAGGED ARGUMENTS
	-w weight
		preweight the input image using atlas information (no_w -> 1)

	-no_wta
		dont use the preweighting fot the template deformation

	-b proba_merging
		use the basins merging using atlas information (no_b -> 1)

	-h int_hpf
		presize the preflooding height (in percent)

	-no_seedpt
		dont use (seedpoints using atlas information)

	-no-ta
		dont use (template deformation using atlas information)

	-atlas
		use the atlas information to correct the segmentation. When 
		the segmented brain is not correct, this option might help 
		you.

	-surf [surfname]
		save the BEM surfaces.In order to get the surfaces consistent 
		with tkmedit, you have to use the option -useSRAS.

	-useSRAS
		use the surface RAS coordinates (not the scanner RAS) for 
		surfaces.

	-noT1
		don't do T1 analysis. (Useful when running out of memory)

	-less
		shrink the surface

	-more
		expand the surface

	-wat
		use only the watershed algorithm

	-T1
		specify T1 input volume (T1 grey value = 110)

	-wat+temp
		watershed algo and first template smoothing

	-first_temp
		use only the first template smoothing + local matching

	-surf_debug
		visualize the surfaces onto the output volume

	-brainsurf [surfname]
		save the brain surface

	-shk_br_surf [int_h surfname]
		to save the brain surface shrank inward of int_h mm

	-s [int_i int_j int_k]
		add a seed point

	-c [int_i int_j int_k]
		specify the center of the brain (in voxel unit)

	-r int_r
		specify the radius of the brain (in voxel unit)

	-t int_threshold
		change the threshold in the watershed analyze process

	-h int_hpf
		precize the preflooding height (in percent)

	-n
		not use the watershed analyze process

	-LABEL
		labelize the output volume into scalp, skull, csf, gray and 
		white

	-man [int_csf int_trn int_gray]
		to change the different parameters csf_max, transition_
		intensity and GM_intensity

	-mask
		mask a volume with the brain mask

	--help
		show usage message

	--version
		show the current version

OUTPUTS
	brainvol
		skull stripped brain volume

	BEMsurfaces
		when you specify the option -brainsurf surfname

EXAMPLE 1
	mri-watershed -atlas T1 brain
	
	where T1 is the T1 volume and brain is the output brain volume. When 
	the cerebellum is cut-off from the brain or getting the left/right 
	asymmetric brain, you should first try this -atlas option.

EXAMPLE 2
	mri-watershed T1 brain
	
	The same as the first example, but no correction is applied to the 
	intermediate result.

REPORTING
	Report bugs to <freesurfer@nmr.mgh.harvard.edu>

SEE ALSO
	mri_normalize


> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fs_help", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fs_imgext")
> ### * fs_imgext
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fs_imgext
> ### Title: Determine extension of image based on FSLOUTPUTTYPE
> ### Aliases: fs_imgext
> 
> ### ** Examples
> 
> fs_imgext()
[1] ".nii.gz"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fs_imgext", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fs_subj_dir")
> ### * fs_subj_dir
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fs_subj_dir
> ### Title: Determine Freesurfer Subjects Directory
> ### Aliases: fs_subj_dir
> 
> ### ** Examples
> 
> if (have_fs()) {
+    fs_subj_dir()
+ }
[1] "/Applications/freesurfer/subjects"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fs_subj_dir", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fs_version")
> ### * fs_version
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fs_version
> ### Title: Find Freesurfer Version
> ### Aliases: fs_version
> 
> ### ** Examples
> 
> if (have_fs()) {
+  fs_version()
+ }
[1] "freesurfer-Darwin-lion-stable-pub-v5.3.0"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fs_version", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_fs")
> ### * get_fs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_fs
> ### Title: Create command declaring FREESURFER_HOME
> ### Aliases: get_fs
> 
> ### ** Examples
> 
> if (have_fs()) {
+ get_fs()
+ }
[1] "export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_fs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_fs_output")
> ### * get_fs_output
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_fs_output
> ### Title: Determine Freesurfer output type
> ### Aliases: get_fs_output
> 
> ### ** Examples
> 
> get_fs_output()
[1] "nii.gz"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_fs_output", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("have_fs")
> ### * have_fs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: have_fs
> ### Title: Logical check if Freesurfer is accessible
> ### Aliases: have_fs
> 
> ### ** Examples
> 
> have_fs()
[1] TRUE
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("have_fs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mnc2nii")
> ### * mnc2nii
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mnc2nii
> ### Title: Convert MNC to NIfTI
> ### Aliases: mnc2nii
> 
> ### ** Examples
> 
> if (have_fs()) {
+    img = oro.nifti::nifti(array(rnorm(5*5*5), dim = c(5,5,5)))  
+    mnc = nii2mnc(img)
+    img_file = mnc2nii(mnc, outfile = tempfile(fileext = ".nii"))
+    neurobase::readnii(img_file, verbose = TRUE)
+ }
export PERL5LIB=$PERL5LIB:/Applications/freesurfer/mni/Library/Perl/Updates/5.10.0 ; export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/mni/bin/nii2mnc "/private/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T/Rtmp7kEQxE/file16a6930f068c4.nii"   "/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a69776e34f5.mnc";

Unknown XYZ units 0
<nifti_image
  nifti_type = 'NIFTI-1+'
  header_filename = '/private/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T/Rtmp7kEQxE/file16a6930f068c4.nii'
  image_filename = '/private/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T/Rtmp7kEQxE/file16a6930f068c4.nii'
  image_offset = '352'
  ndim = '3'
  nx = '5'
  ny = '5'
  nz = '5'
  dx = '1'
  dy = '1'
  dz = '1'
  datatype = '16'
  datatype_name = 'FLOAT32'
  nvox = '125'
  nbyper = '4'
  byteorder = 'LSB_FIRST'
  cal_min = '-2.2147'
  cal_max = '2.40162'
  scl_slope = '1'
  scl_inter = '0'
/>
xspace start:  -2.5000 step:   1.0000 cosines:   1.0000   0.0000   0.0000
yspace start:  -2.5000 step:   1.0000 cosines:   0.0000   1.0000   0.0000
zspace start:  -2.5000 step:   1.0000 cosines:   0.0000   0.0000   1.0000
export PERL5LIB=$PERL5LIB:/Applications/freesurfer/mni/Library/Perl/Updates/5.10.0 ; export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/mni/bin/mnc2nii -float "/private/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T/Rtmp7kEQxE/file16a69776e34f5.mnc"   "/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a696456fe14.nii";

MINC type 5 signed 1
<nifti_image
  nifti_type = 'NIFTI-1+'
  header_filename = '/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a696456fe14.nii'
  image_filename = '/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a696456fe14.nii'
  image_offset = '0'
  ndim = '3'
  nx = '5'
  ny = '5'
  nz = '5'
  dx = '1'
  dy = '1'
  dz = '1'
  datatype = '16'
  datatype_name = 'FLOAT32'
  nvox = '125'
  nbyper = '4'
  byteorder = 'LSB_FIRST'
  scl_slope = '1'
  scl_inter = '0'
  xyz_units = '2'
  xyz_units_name = 'mm'
  time_units = '8'
  time_units_name = 's'
  descrip = '/Applications/freesurfer/mni/bin/mnc2nii /private/var/folders/1s/wrtqcpxn685_zk5'
/>
0: 5 0 1
1: 5 1 1
2: 5 2 1
bytes per voxel 4
# of voxels 125
0 0 0 => -2.500000 -2.500000 -2.500000
10 0 0 => 7.500000 -2.500000 -2.500000
0 10 0 => -2.500000 7.500000 -2.500000
0 0 10 => -2.500000 -2.500000 7.500000
10 10 10 => 7.500000 7.500000 7.500000
  fname = /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a696456fe14.nii
  files = /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a696456fe14.nii
  hdr   = 
/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a696456fe14.nii
  vox_offset = 348
Malformed NIfTI - not reading NIfTI extension, use at own risk!
  seek(fid) = 348
NIfTI-1 format
  Type            : nifti
  Data Type       : 16 (FLOAT32)
  Bits per Pixel  : 32
  Slice Code      : 0 (Unknown)
  Intent Code     : 0 (None)
  Qform Code      : 0 (Unknown)
  Sform Code      : 0 (Unknown)
  Dimension       : 5 x 5 x 5
  Pixel Dimension : 1 x 1 x 1
  Voxel Units     : mm
  Time Units      : sec
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mnc2nii", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mri_convert")
> ### * mri_convert
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mri_convert
> ### Title: Use Freesurfers MRI Converter
> ### Aliases: mri_convert
> 
> ### ** Examples
> 
> if (have_fs()) {
+    img = oro.nifti::nifti(array(rnorm(5*5*5), dim = c(5,5,5))) 
+    res = mri_convert(img, outfile = tempfile(fileext = ".mgz"))
+ } 
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/mri_convert "/private/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T/Rtmp7kEQxE/file16a69b430683.nii.gz"   "/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a695d60883b.mgz";

/Applications/freesurfer/bin/mri_convert /private/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T/Rtmp7kEQxE/file16a69b430683.nii.gz /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a695d60883b.mgz 
WARNING: neither NIfTI-1 qform or sform are valid
WARNING: your volume will probably be incorrectly oriented
$Id: mri_convert.c,v 1.179.2.7 2012/09/05 21:55:16 mreuter Exp $
reading from /private/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T/Rtmp7kEQxE/file16a69b430683.nii.gz...
niiRead(): NIFTI_UNITS_UNKNOWN, assuming mm
TR=0.00, TE=0.00, TI=0.00, flip angle=0.00
WARNING: it does not appear that there was sufficient information
in the input to assign orientation to the volume... 
i_ras = (-1, 0, 0)
j_ras = (0, 1, 0)
k_ras = (0, 0, 1)
writing to /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a695d60883b.mgz...
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mri_convert", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mri_info")
> ### * mri_info
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mri_info
> ### Title: MRI information
> ### Aliases: mri_info
> 
> ### ** Examples
> 
> if (have_fs()){
+    img = oro.nifti::nifti(array(rnorm(5*5*5), dim = c(5,5,5)))  
+    mri_info(img)
+ }
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/mri_info "/private/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T/Rtmp7kEQxE/file16a696c900961.nii.gz"  ;

WARNING: neither NIfTI-1 qform or sform are valid
WARNING: your volume will probably be incorrectly oriented
niiRead(): NIFTI_UNITS_UNKNOWN, assuming mm
Volume information for /private/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T/Rtmp7kEQxE/file16a696c900961.nii.gz
          type: nii
    dimensions: 5 x 5 x 5
   voxel sizes: 1.0000, 1.0000, 1.0000
          type: FLOAT (3)
           fov: 5.000
           dof: 0
        xstart: -2.5, xend: 2.5
        ystart: -2.5, yend: 2.5
        zstart: -2.5, zend: 2.5
            TR: 0.00 msec, TE: 0.00 msec, TI: 0.00 msec, flip angle: 0.00 degrees
       nframes: 1
       PhEncDir: UNKNOWN
ras xform not present
    xform info: x_r =  -1.0000, y_r =   0.0000, z_r =   0.0000, c_r =     2.5000
              : x_a =   0.0000, y_a =   1.0000, z_a =   0.0000, c_a =     2.5000
              : x_s =   0.0000, y_s =   0.0000, z_s =   1.0000, c_s =     2.5000
Orientation   : ???
Primary Slice Direction: unknown

voxel to ras transform:
               -1.0000   0.0000   0.0000     5.0000
                0.0000   1.0000   0.0000     0.0000
                0.0000   0.0000   1.0000     0.0000
                0.0000   0.0000   0.0000     1.0000

voxel-to-ras determinant -1

ras to voxel transform:
               -1.0000   0.0000   0.0000     5.0000
               -0.0000   1.0000  -0.0000    -0.0000
               -0.0000  -0.0000   1.0000    -0.0000
                0.0000   0.0000   0.0000     1.0000
NIfTI-1 format
  Type            : nifti
  Data Type       : 16 (FLOAT32)
  Bits per Pixel  : 32
  Slice Code      : 0 (Unknown)
  Intent Code     : 0 (None)
  Qform Code      : 0 (Unknown)
  Sform Code      : 0 (Unknown)
  Dimension       : 5 x 5 x 5
  Pixel Dimension : 1 x 1 x 1
  Voxel Units     : Unknown
  Time Units      : Unknown
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mri_info", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mri_mask")
> ### * mri_mask
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mri_mask
> ### Title: Use Freesurfers MRI Mask
> ### Aliases: mri_mask
> 
> ### ** Examples
> 
> if (have_fs()) {
+    img = oro.nifti::nifti(array(rnorm(5*5*5), dim = c(5,5,5)))  
+    mask = img > 1
+    res = mri_mask(img, mask)
+ }
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/mri_mask "/private/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T/Rtmp7kEQxE/file16a694b16824a.nii.gz"  /private/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T/Rtmp7kEQxE/file16a696457f6f5.nii.gz "/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a6932c3eec9.nii.gz";

WARNING: neither NIfTI-1 qform or sform are valid
WARNING: your volume will probably be incorrectly oriented
WARNING: neither NIfTI-1 qform or sform are valid
WARNING: your volume will probably be incorrectly oriented
niiRead(): NIFTI_UNITS_UNKNOWN, assuming mm
niiRead(): NIFTI_UNITS_UNKNOWN, assuming mm
DoAbs = 0
Writing masked volume to /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a6932c3eec9.nii.gz...done.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mri_mask", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mri_normalize")
> ### * mri_normalize
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mri_normalize
> ### Title: Use Freesurfers MRI Normalize Algorithm
> ### Aliases: mri_normalize
> 
> ### ** Examples
> 
> ## Not run: 
> ##D if (have_fs()){
> ##D     mri_normalize("/path/to/T1.nii.gz")
> ##D } 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mri_normalize", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mri_segment")
> ### * mri_segment
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mri_segment
> ### Title: Use Freesurfers MRI Segmentation Algorithm
> ### Aliases: mri_segment
> 
> ### ** Examples
> 
> ## Not run: 
> ##D if (have_fs()){
> ##D     mri_segment("/path/to/T1.nii.gz")
> ##D } 
> ## End(Not run) 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mri_segment", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mri_surf2surf")
> ### * mri_surf2surf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mri_surf2surf
> ### Title: Use Freesurfers 'mri_surf2surf' function to resamples one
> ###   cortical surface onto another
> ### Aliases: mri_surf2surf
> 
> ### ** Examples
> 
> if (have_fs()) {
+    out = mri_surf2surf( 
+    subject = 'bert',
+    target_subject = 'fsaverage', 
+    trg_type  = 'curv', 
+    src_type  = 'curv', 
+    hemi = "rh",
+    sval = "thickness")
+ } 
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/mri_surf2surf --hemi rh --s bert --trgsubject fsaverage --trg_type curv --sval thickness --src_type curv --tval /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a695d71e828 --debug 

srcsubject = bert
srcval     = thickness
srctype    = curv
trgsubject = fsaverage
trgval     = /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a695d71e828
trgtype    = curv
srcsurfreg = sphere.reg
trgsurfreg = sphere.reg
srchemi    = rh
trghemi    = rh
frame      = 0
fwhm-in    = 0
fwhm-out   = 0
label-src  = (null)
label-trg  = (null)
OKToRevFaceOrder  = 1
Reading source surface reg /Applications/freesurfer/subjects/bert/surf/rh.sphere.reg
Loading source data
Reading curvature file /Applications/freesurfer/subjects/bert/surf/rh.thickness
Reading target surface reg /Applications/freesurfer/subjects/fsaverage/surf/rh.sphere.reg
Done
Mapping Source Volume onto Source Subject Surface
surf2surf_nnfr: building source hash (res=16).
Surf2Surf: Forward Loop (163842)

surf2surf_nnfr: building target hash (res=16).
Surf2Surf: Reverse Loop (133299)
Reverse Loop had 21660 hits
Surf2Surf: Dividing by number of hits (163842)
INFO: nSrcLost = 0
nTrg121 = 146487, nTrgMulti = 17355, MnTrgMultiHits = 2.24806
nSrc121 = 94087, nSrcLost =     0, nSrcMulti = 39212, MnSrcMultiHits = 2.3313
Saving target data
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mri_surf2surf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mri_watershed")
> ### * mri_watershed
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mri_watershed
> ### Title: Use Freesurfers MRI Watershed Algorithm
> ### Aliases: mri_watershed
> 
> ### ** Examples
> 
> ## Not run: 
> ##D if (have_fs()){
> ##D     mri_watershed("/path/to/T1.nii.gz")
> ##D } 
> ## End(Not run)  
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mri_watershed", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mris_convert")
> ### * mris_convert
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mris_convert
> ### Title: Use Freesurfers MRIs Converter
> ### Aliases: mris_convert
> 
> ### ** Examples
> 
> if (have_fs()) {
+  bert_surf_dir = file.path(fs_subj_dir(), "bert", "surf")
+  asc_file = mris_convert(
+  infile = file.path(bert_surf_dir, "lh.white")
+  )  
+ } 
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/mris_convert   /Applications/freesurfer/subjects/bert/surf/lh.white /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a696140ca05.asc

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mris_convert", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mris_convert_annot")
> ### * mris_convert_annot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mris_convert_annot
> ### Title: Convert Annotation file
> ### Aliases: mris_convert_annot
> 
> ### ** Examples
> 
> if (have_fs()) {
+  bert_dir = file.path(fs_subj_dir(), "bert")
+  gii_file = mris_convert_annot(
+  infile = file.path(bert_dir, "surf", "lh.white"),
+  annot = file.path(bert_dir, "label", "lh.aparc.annot"),
+  ext = ".gii"
+  )  
+  gii = mris_convert_annot(
+  infile = file.path(bert_dir, "surf", "lh.white"),
+  annot = gii_file,
+  ext = ".gii"
+  )  
+ }   
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/mris_convert  --annot /Applications/freesurfer/subjects/bert/label/lh.aparc.annot  /Applications/freesurfer/subjects/bert/surf/lh.white /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a69648f4024.gii

reading colortable from annotation file...
colortable with 36 entries read (originally /autofs/space/terrier_001/users/nicks/freesurfer/average/colortable_desikan_killiany.txt)
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/mris_convert  --annot /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a69648f4024.gii  /Applications/freesurfer/subjects/bert/surf/lh.white /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a6978bc2f0f.gii

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mris_convert_annot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mris_convert_curv")
> ### * mris_convert_curv
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mris_convert_curv
> ### Title: Convert Curvature file
> ### Aliases: mris_convert_curv
> 
> ### ** Examples
> 
> if (have_fs()) {
+  bert_surf_dir = file.path(fs_subj_dir(), "bert", "surf")
+  asc_file = mris_convert_curv(
+  infile = file.path(bert_surf_dir, "lh.white"),
+  curv = file.path(bert_surf_dir, "lh.thickness")
+  )  
+  res = read_fs_table(asc_file, header = FALSE)
+  colnames(res) = c("index", "coord_1", "coord_2", "coord_3", "value")
+  head(res)
+ }  
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/mris_convert  -c /Applications/freesurfer/subjects/bert/surf/lh.thickness  /Applications/freesurfer/subjects/bert/surf/lh.white /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a69ab5bfb6.asc

  index   coord_1   coord_2   coord_3   value
1     0 -12.88209 -102.4488  -9.78196 1.44282
2     1 -13.33096 -102.5183  -9.82893 1.40499
3     2 -13.63731 -102.5144 -10.07715 1.40320
4     3 -13.03114 -102.5959 -10.02414 1.32799
5     4 -13.33139 -102.5096 -10.25439 1.35585
6     5 -13.60981 -102.4827 -10.29490 1.38966
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mris_convert_curv", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mris_convert_normals")
> ### * mris_convert_normals
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mris_convert_normals
> ### Title: Convert Surface to Surface normals
> ### Aliases: mris_convert_normals
> 
> ### ** Examples
> 
> if (have_fs()) {
+  bert_dir = file.path(fs_subj_dir(), "bert")
+  asc_file = mris_convert_normals(
+  infile = file.path(bert_dir, "surf", "lh.white")
+  )  
+ readLines(asc_file, n = 6)
+ }   
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/mris_convert   -n  /Applications/freesurfer/subjects/bert/surf/lh.white /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a69223d4b38.asc

[1] "#!ascii version of /Applications/freesurfer/subjects/bert/surf/lh.white (vertices are surface normals)"
[2] "133401 266798"                                                                                         
[3] "0.345353  -0.891737  0.292467  0"                                                                      
[4] "-0.025496  -0.976696  0.213107  0"                                                                     
[5] "-0.141101  -0.988536  -0.053726  0"                                                                    
[6] "0.169430  -0.985386  0.017551  0"                                                                      
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mris_convert_normals", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mris_convert_vertex")
> ### * mris_convert_vertex
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mris_convert_vertex
> ### Title: Convert Surface to vertex file
> ### Aliases: mris_convert_vertex
> 
> ### ** Examples
> 
> if (have_fs()) {
+  bert_surf_dir = file.path(fs_subj_dir(), "bert", "surf")
+  asc_file = mris_convert_vertex(
+  infile = file.path(bert_surf_dir, "lh.white")
+  )  
+  readLines(asc_file, n = 6)
+  
+ } 
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/mris_convert   -v  /Applications/freesurfer/subjects/bert/surf/lh.white /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a6966155b17.asc

[1] "     0  5        3      1     67     66     75 "              
[2] "     1  6        0      3      4     67      2     68 "       
[3] "     2  5        1      4      5     68     77 "              
[4] "     3  4        1      0      4     75 "                     
[5] "     4  7        1      3      2      5     75     76     77 "
[6] "     5  3        2      4     77 "                            
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mris_convert_vertex", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mris_euler_number")
> ### * mris_euler_number
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mris_euler_number
> ### Title: MRI Euler Number
> ### Aliases: mris_euler_number
> 
> ### ** Examples
> 
> ## Not run: 
> ##D if (have_fs()) {
> ##D    img = oro.nifti::nifti(array(rnorm(5*5*5), dim = c(5,5,5))) 
> ##D    res = mris_euler_number(img, outfile = tempfile(fileext = ".mgz"))
> ##D } 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mris_euler_number", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("nii2mnc")
> ### * nii2mnc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: nii2mnc
> ### Title: Convert NIfTI to MNC
> ### Aliases: nii2mnc
> 
> ### ** Examples
> 
> if (have_fs()) {
+    img = oro.nifti::nifti(array(rnorm(5*5*5), dim = c(5,5,5)))  
+    mnc = nii2mnc(img)
+    img_file = mnc2nii(mnc)
+ }
export PERL5LIB=$PERL5LIB:/Applications/freesurfer/mni/Library/Perl/Updates/5.10.0 ; export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/mni/bin/nii2mnc "/private/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T/Rtmp7kEQxE/file16a6940f775d.nii"   "/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a6913657cc0.mnc";

Unknown XYZ units 0
<nifti_image
  nifti_type = 'NIFTI-1+'
  header_filename = '/private/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T/Rtmp7kEQxE/file16a6940f775d.nii'
  image_filename = '/private/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T/Rtmp7kEQxE/file16a6940f775d.nii'
  image_offset = '352'
  ndim = '3'
  nx = '5'
  ny = '5'
  nz = '5'
  dx = '1'
  dy = '1'
  dz = '1'
  datatype = '16'
  datatype_name = 'FLOAT32'
  nvox = '125'
  nbyper = '4'
  byteorder = 'LSB_FIRST'
  cal_min = '-2.2147'
  cal_max = '2.40162'
  scl_slope = '1'
  scl_inter = '0'
/>
xspace start:  -2.5000 step:   1.0000 cosines:   1.0000   0.0000   0.0000
yspace start:  -2.5000 step:   1.0000 cosines:   0.0000   1.0000   0.0000
zspace start:  -2.5000 step:   1.0000 cosines:   0.0000   0.0000   1.0000
export PERL5LIB=$PERL5LIB:/Applications/freesurfer/mni/Library/Perl/Updates/5.10.0 ; export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/mni/bin/mnc2nii -float "/private/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T/Rtmp7kEQxE/file16a6913657cc0.mnc"   "/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a696be12b32.nii";

MINC type 5 signed 1
<nifti_image
  nifti_type = 'NIFTI-1+'
  header_filename = '/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a696be12b32.nii'
  image_filename = '/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a696be12b32.nii'
  image_offset = '0'
  ndim = '3'
  nx = '5'
  ny = '5'
  nz = '5'
  dx = '1'
  dy = '1'
  dz = '1'
  datatype = '16'
  datatype_name = 'FLOAT32'
  nvox = '125'
  nbyper = '4'
  byteorder = 'LSB_FIRST'
  scl_slope = '1'
  scl_inter = '0'
  xyz_units = '2'
  xyz_units_name = 'mm'
  time_units = '8'
  time_units_name = 's'
  descrip = '/Applications/freesurfer/mni/bin/mnc2nii /private/var/folders/1s/wrtqcpxn685_zk5'
/>
0: 5 0 1
1: 5 1 1
2: 5 2 1
bytes per voxel 4
# of voxels 125
0 0 0 => -2.500000 -2.500000 -2.500000
10 0 0 => 7.500000 -2.500000 -2.500000
0 10 0 => -2.500000 7.500000 -2.500000
0 0 10 => -2.500000 -2.500000 7.500000
10 10 10 => 7.500000 7.500000 7.500000
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("nii2mnc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("nu_correct")
> ### * nu_correct
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: nu_correct
> ### Title: Use Freesurfers Non-Uniformity Correction
> ### Aliases: nu_correct
> 
> ### ** Examples
> 
> ## Not run: 
> ##D if (have_fs()){
> ##D     nu_correct("/path/to/T1.nii.gz")
> ##D } 
> ## End(Not run) 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("nu_correct", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read_aseg_stats")
> ### * read_aseg_stats
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read_aseg_stats
> ### Title: Read Anatomical Segmentation Statistics
> ### Aliases: read_aseg_stats
> 
> ### ** Examples
> 
> if (have_fs()) {
+  file = file.path(fs_subj_dir(), "bert", "stats", "aseg.stats")
+  out = read_aseg_stats(file)
+ }
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read_aseg_stats", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read_fs_label")
> ### * read_fs_label
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read_fs_label
> ### Title: Read Label File
> ### Aliases: read_fs_label
> 
> ### ** Examples
> 
> if (have_fs()) {
+  file = file.path(fs_subj_dir(), "bert", "label", "lh.BA1.label")
+  out = read_fs_label(file)
+ }
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read_fs_label", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read_fs_table")
> ### * read_fs_table
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read_fs_table
> ### Title: Read Freesurfer Table Output
> ### Aliases: read_fs_table
> 
> ### ** Examples
> 
> if (have_fs()) {
+    outfile = aparcstats2table(subjects = "bert",
+                     hemi = "lh",
+                     meas = "thickness")
+    df = read_fs_table(outfile)
+    seg_outfile = asegstats2table(subjects = "bert", meas = "mean")
+    df_seg = read_fs_table(seg_outfile)
+ }
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/aparcstats2table --hemi lh --subjects bert --delimiter tab --parc aparc --debug --measure thickness --tablefile /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a6950cc0c6e.txt 

-- The options you entered --
{'meas': 'thickness', 'hemi': 'lh', 'parc': 'aparc', 'qdeclong': None, 'transposeflag': False, 'qdec': None, 'commonparcflag': False, 'skipflag': False, 'parcidflag': False, 'verboseflag': True, 'subjectsfile': None, 'delimiter': 'tab', 'outputfile': '/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a6950cc0c6e.txt', 'parcs': None, 'reportroiflag': False, 'parcsfile': None, 'subjects': ['bert']}
--------------------
Processing file /Applications/freesurfer/subjects/bert/stats/lh.aparc.stats
-- Parsed Parcs and Measures --
StableDict({'bankssts': 2.693, 'caudalanteriorcingulate': 2.311, 'caudalmiddlefrontal': 2.645, 'cuneus': 1.792, 'entorhinal': 3.099, 'fusiform': 2.569, 'inferiorparietal': 2.538, 'inferiortemporal': 2.897, 'isthmuscingulate': 2.192, 'lateraloccipital': 2.243, 'lateralorbitofrontal': 2.833, 'lingual': 1.744, 'medialorbitofrontal': 2.597, 'middletemporal': 3.109, 'parahippocampal': 2.399, 'paracentral': 2.531, 'parsopercularis': 2.948, 'parsorbitalis': 3.183, 'parstriangularis': 2.651, 'pericalcarine': 1.542, 'postcentral': 2.192, 'posteriorcingulate': 2.496, 'precentral': 2.915, 'precuneus': 2.349, 'rostralanteriorcingulate': 3.072, 'rostralmiddlefrontal': 2.473, 'superiorfrontal': 2.929, 'superiorparietal': 2.309, 'superiortemporal': 2.911, 'supramarginal': 2.742, 'frontalpole': 2.981, 'temporalpole': 3.891, 'transversetemporal': 2.484, 'insula': 3.09, 'MeanThickness': 2.58477})
--------------------
Specifier: bert
Intersection upto now:
['bankssts', 'caudalanteriorcingulate', 'caudalmiddlefrontal', 'cuneus', 'entorhinal', 'fusiform', 'inferiorparietal', 'inferiortemporal', 'isthmuscingulate', 'lateraloccipital', 'lateralorbitofrontal', 'lingual', 'medialorbitofrontal', 'middletemporal', 'parahippocampal', 'paracentral', 'parsopercularis', 'parsorbitalis', 'parstriangularis', 'pericalcarine', 'postcentral', 'posteriorcingulate', 'precentral', 'precuneus', 'rostralanteriorcingulate', 'rostralmiddlefrontal', 'superiorfrontal', 'superiorparietal', 'superiortemporal', 'supramarginal', 'frontalpole', 'temporalpole', 'transversetemporal', 'insula', 'MeanThickness']
--------------------
Union:
['bankssts', 'caudalanteriorcingulate', 'caudalmiddlefrontal', 'cuneus', 'entorhinal', 'fusiform', 'inferiorparietal', 'inferiortemporal', 'isthmuscingulate', 'lateraloccipital', 'lateralorbitofrontal', 'lingual', 'medialorbitofrontal', 'middletemporal', 'parahippocampal', 'paracentral', 'parsopercularis', 'parsorbitalis', 'parstriangularis', 'pericalcarine', 'postcentral', 'posteriorcingulate', 'precentral', 'precuneus', 'rostralanteriorcingulate', 'rostralmiddlefrontal', 'superiorfrontal', 'superiorparietal', 'superiortemporal', 'supramarginal', 'frontalpole', 'temporalpole', 'transversetemporal', 'insula', 'MeanThickness']
SUBJECTS_DIR : /Applications/freesurfer/subjects
Parsing the .stats files
Building the table..
Writing the table to /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a6950cc0c6e.txt
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/asegstats2table --subjects bert --delimiter tab --debug --meas mean --tablefile /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a694443333.txt 

-- The options you entered --
{'maxsegno': None, 'inputs': None, 'all_flag': False, 'verboseflag': True, 'skipflag': False, 'qdeclong': None, 'transposeflag': False, 'qdec': None, 'delimiter': 'tab', 'segnos': None, 'meas': 'mean', 'statsfname': None, 'dodirect': False, 'subjectsfile': None, 'outputfile': '/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a694443333.txt', 'segidsfile': None, 'no_segnos': None, 'subdir': None, 'subjects': ['bert'], 'common_flag': False}
--------------------
Processing file /Applications/freesurfer/subjects/bert/stats/aseg.stats
-- Parsed Ids, Names --
StableDict({'4': 'Left-Lateral-Ventricle', '5': 'Left-Inf-Lat-Vent', '7': 'Left-Cerebellum-White-Matter', '8': 'Left-Cerebellum-Cortex', '10': 'Left-Thalamus-Proper', '11': 'Left-Caudate', '12': 'Left-Putamen', '13': 'Left-Pallidum', '14': '3rd-Ventricle', '15': '4th-Ventricle', '16': 'Brain-Stem', '17': 'Left-Hippocampus', '18': 'Left-Amygdala', '24': 'CSF', '26': 'Left-Accumbens-area', '28': 'Left-VentralDC', '30': 'Left-vessel', '31': 'Left-choroid-plexus', '43': 'Right-Lateral-Ventricle', '44': 'Right-Inf-Lat-Vent', '46': 'Right-Cerebellum-White-Matter', '47': 'Right-Cerebellum-Cortex', '49': 'Right-Thalamus-Proper', '50': 'Right-Caudate', '51': 'Right-Putamen', '52': 'Right-Pallidum', '53': 'Right-Hippocampus', '54': 'Right-Amygdala', '58': 'Right-Accumbens-area', '60': 'Right-VentralDC', '62': 'Right-vessel', '63': 'Right-choroid-plexus', '72': '5th-Ventricle', '77': 'WM-hypointensities', '78': 'Left-WM-hypointensities', '79': 'Right-WM-hypointensities', '80': 'non-WM-hypointensities', '81': 'Left-non-WM-hypointensities', '82': 'Right-non-WM-hypointensities', '85': 'Optic-Chiasm', '251': 'CC_Posterior', '252': 'CC_Mid_Posterior', '253': 'CC_Central', '254': 'CC_Mid_Anterior', '255': 'CC_Anterior'})
-- Measures --
[36.0959, 54.8842, 92.7562, 77.2709, 92.8386, 80.9591, 88.381, 98.3287, 45.0488, 38.1701, 86.3845, 77.5933, 77.9203, 53.0562, 76.0928, 93.2606, 67.4074, 52.9403, 38.666, 46.2619, 93.1505, 77.0261, 91.032, 81.7689, 87.4327, 97.2662, 77.371, 78.3497, 79.6013, 92.0489, 67.1892, 58.6039, 51.3846, 73.9494, 0.0, 0.0, 60.4, 0.0, 0.0, 78.062, 106.6502, 100.4876, 100.6612, 102.1485, 104.7069]
----------------------------------------
Sanitizing the table
--------------------
Specifier: bert
Intersection upto now:
['Left-Lateral-Ventricle', 'Left-Inf-Lat-Vent', 'Left-Cerebellum-White-Matter', 'Left-Cerebellum-Cortex', 'Left-Thalamus-Proper', 'Left-Caudate', 'Left-Putamen', 'Left-Pallidum', '3rd-Ventricle', '4th-Ventricle', 'Brain-Stem', 'Left-Hippocampus', 'Left-Amygdala', 'CSF', 'Left-Accumbens-area', 'Left-VentralDC', 'Left-vessel', 'Left-choroid-plexus', 'Right-Lateral-Ventricle', 'Right-Inf-Lat-Vent', 'Right-Cerebellum-White-Matter', 'Right-Cerebellum-Cortex', 'Right-Thalamus-Proper', 'Right-Caudate', 'Right-Putamen', 'Right-Pallidum', 'Right-Hippocampus', 'Right-Amygdala', 'Right-Accumbens-area', 'Right-VentralDC', 'Right-vessel', 'Right-choroid-plexus', '5th-Ventricle', 'WM-hypointensities', 'Left-WM-hypointensities', 'Right-WM-hypointensities', 'non-WM-hypointensities', 'Left-non-WM-hypointensities', 'Right-non-WM-hypointensities', 'Optic-Chiasm', 'CC_Posterior', 'CC_Mid_Posterior', 'CC_Central', 'CC_Mid_Anterior', 'CC_Anterior']
--------------------
Union:
['Left-Lateral-Ventricle', 'Left-Inf-Lat-Vent', 'Left-Cerebellum-White-Matter', 'Left-Cerebellum-Cortex', 'Left-Thalamus-Proper', 'Left-Caudate', 'Left-Putamen', 'Left-Pallidum', '3rd-Ventricle', '4th-Ventricle', 'Brain-Stem', 'Left-Hippocampus', 'Left-Amygdala', 'CSF', 'Left-Accumbens-area', 'Left-VentralDC', 'Left-vessel', 'Left-choroid-plexus', 'Right-Lateral-Ventricle', 'Right-Inf-Lat-Vent', 'Right-Cerebellum-White-Matter', 'Right-Cerebellum-Cortex', 'Right-Thalamus-Proper', 'Right-Caudate', 'Right-Putamen', 'Right-Pallidum', 'Right-Hippocampus', 'Right-Amygdala', 'Right-Accumbens-area', 'Right-VentralDC', 'Right-vessel', 'Right-choroid-plexus', '5th-Ventricle', 'WM-hypointensities', 'Left-WM-hypointensities', 'Right-WM-hypointensities', 'non-WM-hypointensities', 'Left-non-WM-hypointensities', 'Right-non-WM-hypointensities', 'Optic-Chiasm', 'CC_Posterior', 'CC_Mid_Posterior', 'CC_Central', 'CC_Mid_Anterior', 'CC_Anterior']
SUBJECTS_DIR : /Applications/freesurfer/subjects
Parsing the .stats files
Building the table..
Writing the table to /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a694443333.txt
> ## Not run: 
> ##D ### using the pipe
> ##D df_seg = asegstats2table(subjects = "bert", meas = "mean") %>% 
> ##D             read_fs_table
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read_fs_table", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("surf_convert")
> ### * surf_convert
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: surf_convert
> ### Title: Convert Surface Data to ASCII
> ### Aliases: surf_convert
> 
> ### ** Examples
> 
> if (have_fs()) {
+    fname = file.path(fs_subj_dir(), "bert", "surf", "lh.thickness")
+    out = surf_convert(fname)
+ }
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/mri_convert --ascii+crsf "/Applications/freesurfer/subjects/bert/surf/lh.thickness"   "/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a69197d5b75.dat";

/Applications/freesurfer/bin/mri_convert --ascii+crsf /Applications/freesurfer/subjects/bert/surf/lh.thickness /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a69197d5b75.dat 
$Id: mri_convert.c,v 1.179.2.7 2012/09/05 21:55:16 mreuter Exp $
reading from /Applications/freesurfer/subjects/bert/surf/lh.thickness...
TR=0.00, TE=0.00, TI=0.00, flip angle=0.00
i_ras = (-1, 0, 0)
j_ras = (0, 0, -1)
k_ras = (0, 1, 0)
Writing as ASCII to /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a69197d5b75.dat
done
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("surf_convert", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("surface_to_obj")
> ### * surface_to_obj
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: surface_to_obj
> ### Title: Convert Freesurfer Surface to Wavefront OBJ
> ### Aliases: surface_to_obj
> 
> ### ** Examples
> 
> if (have_fs()) {
+ infile = file.path(fs_subj_dir(), 
+                    "bert", "surf", "rh.pial")
+ res = surface_to_obj(infile = infile)
+ }
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/mris_convert   /Applications/freesurfer/subjects/bert/surf/rh.pial /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a6974ff6b65.asc

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("surface_to_obj", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("surface_to_triangles")
> ### * surface_to_triangles
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: surface_to_triangles
> ### Title: Convert Freesurfer Surface to Triangles
> ### Aliases: surface_to_triangles
> 
> ### ** Examples
> 
> if (have_fs()) {
+ infile = file.path(fs_subj_dir(), 
+                    "bert", "surf", "rh.pial")
+ right_triangles = surface_to_triangles(infile = infile)
+ infile = file.path(fs_subj_dir(), 
+                    "bert", "surf", "lh.pial")
+ left_triangles = surface_to_triangles(infile = infile) 
+ if (requireNamespace("rgl", quietly = TRUE)) {
+   rgl::rgl.open()
+   rgl::rgl.triangles(right_triangles, 
+   color = rainbow(nrow(right_triangles)))
+   rgl::rgl.triangles(left_triangles, 
+   color = rainbow(nrow(left_triangles)))
+ }
+ infile = file.path(fs_subj_dir(), 
+                    "bert", "surf", "rh.inflated")
+ right_triangles = surface_to_triangles(infile = infile)  
+ infile = file.path(fs_subj_dir(), 
+                    "bert", "surf", "lh.inflated") 
+ left_triangles = surface_to_triangles(infile = infile)  
+ if (requireNamespace("rgl", quietly = TRUE)) {
+   rgl::rgl.open()
+   rgl::rgl.triangles(left_triangles, 
+   color = rainbow(nrow(left_triangles)))
+   rgl::rgl.triangles(right_triangles, 
+   color = rainbow(nrow(right_triangles)))   
+ } 
+ }
export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/mris_convert   /Applications/freesurfer/subjects/bert/surf/rh.pial /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a69289aba69.asc

export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/mris_convert   /Applications/freesurfer/subjects/bert/surf/lh.pial /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a6946445852.asc

export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/mris_convert   /Applications/freesurfer/subjects/bert/surf/rh.inflated /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a6931029388.asc

export FREESURFER_HOME='/Applications/freesurfer'; FSF_OUTPUT_FORMAT=nii.gz; export FSF_OUTPUT_FORMAT; ${FREESURFER_HOME}/bin/mris_convert   /Applications/freesurfer/subjects/bert/surf/lh.inflated /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmp7kEQxE/file16a692023dedb.asc

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("surface_to_triangles", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  38.728 1.273 72.726 25.105 3.353 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
